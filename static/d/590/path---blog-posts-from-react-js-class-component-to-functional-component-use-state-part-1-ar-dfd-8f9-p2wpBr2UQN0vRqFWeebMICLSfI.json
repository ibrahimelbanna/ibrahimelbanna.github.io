{"data":{"markdownRemark":{"html":"<p>السﻻم عليكم، فى البوست ده (متقسم على جزئين) هحول reactjs code من الـ class component للـ functional component. وهركز بشكل اساسى على <code>useState</code> و <code>useEffect</code>.\nخلينا نبدأ بالجزء اﻻول واللى هنتكلم فيه عن الـ <code>useState</code>.</p>\n<h2>State</h2>\n<h3>فى Class Component</h3>\n<p>فى الـ class component، بنعرّف <code>State</code> فى الـ <code>constructor</code> ولما نغيرها هنستخدم <code>setState()</code> وهنديها الـ <code>state</code> الجديدة، كما هو موضح فالكود التالى:</p>\n<pre><code class=\"language-jsx\">import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    };\n  }\n  render() {\n    return (\n      &#x3C;div className=\"App\">\n        &#x3C;h1>Current count: {this.state.count}&#x3C;/h1>\n        &#x3C;button onClick={() => this.setState({ count: this.state.count + 1 })}>\n          Increment\n        &#x3C;/button>\n      &#x3C;/div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(&#x3C;App />, rootElement);\n</code></pre>\n<p>فى حاجة مهمة مفيدة فى الـ <code>useState</code> هى اننا ممكن نبعت فانكشن فى <code>argument</code> تانى كـ <code>callback</code> يعنى بحيث ان بمجرد ما يغير الـ <code>state</code> الـ <code>callback function</code> تكون معاها الـ <code>state</code> الجديدة\nكما هو موضح فى الكود التالى:</p>\n<pre><code class=\"language-jsx\">&#x3C;button\n  onClick={() =>\n    this.setState({ count: this.state.count + 1 }, () => {\n      console.log(this.state.count);\n     })\n  }\n>\n</code></pre>\n<h3>فى Functional Component</h3>\n<p>فى الـ <code>functional component</code> ﻻ يوجد <code>constructor()</code> وﻻ <code>render()</code>.\nفأول حاجة محتاجين نعملها هى اننا نـ <code>import</code> الـ <code>useState hook</code> من <code>react</code>.\n<code>import React, { useState } from \"react\";</code>\n<code>useState</code> تأخذ قيمة واحدة فقط، وترجع حاجتين القيمة الـ <code>stateful</code> وفانكشن عشان نغير بيها القيمة دى، فبنستخدمها زى كدة:\n<code>const [state, setState] = useState(initialValue);</code>\nالطريقة دى اسمها <code>Destructuring</code> ممكن تبحثوا عنها وتعرفوا عنها اكتر.\nوبعد كدة هنستخدمها ببساطة زى مثال الـ <code>class</code></p>\n<pre><code class=\"language-jsx\">const [state, setState] = useState({\n  count: 0\n});\n\nconsole.log(state.count); // 0\n</code></pre>\n<p>ونغيرها زى كدة:</p>\n<pre><code class=\"language-jsx\">setState({ count: state.count + 1 });\n</code></pre>\n<h4>لو عندنا اكتر من قيمة للـ state هنعمل ايه؟</h4>\n<p>عندنا حليين للموضوع ده</p>\n<ul>\n<li>اﻻول ببساطة هنستخدمه زى المثال اللى فات</li>\n</ul>\n<pre><code class=\"language-jsx\">const [state, setState] = useState({\n  count: 0,\n  barcode: \"1A\"\n});\n</code></pre>\n<p>بس ﻻتنسى انك بتغير القيمة اللى محتاجة تتغير وترجع الـ <code>state</code> القديم زى ما كان</p>\n<pre><code class=\"language-jsx\">setState({\n  ...state,\n  barcode: \"2B\"\n});\n</code></pre>\n<p>عشان لو كتبتها كدة <code>setState({barcode: \"2B\"});</code> هيبقى كأنك شيلت الـ <code>count</code> وجعلت الـ <code>state</code> بالـ <code>barcode</code> فقط.</p>\n<ul>\n<li>تانى حاجة وهى اننا ممكن نستخدم <code>useState</code> اكتر من مرة فى نفس الـ <code>component</code></li>\n</ul>\n<pre><code class=\"language-jsx\">const [count, setCount] = useState(0);\nconst [barcode, setBarcode] = useState(\"1A\");\n</code></pre>\n<p>ونغيرهم زى كدة:</p>\n<pre><code class=\"language-jsx\">setBarcode(value);\nsetCount(count + 1);\n</code></pre>\n<p>بس <code>useState</code> فيها مشكلة انها مش بتقبل <code>second argument/callback</code> يعنى لو الـ <code>state</code> متعرفش تستخدمها عشان تغير قيمة حاجة معينة معتمدة ع الـ <code>state</code>. فهنستخدم وقتها <code>hook</code> تانية اسمها <code>useEffect</code>.</p>\n<p>قبل ما تنتهى من القراءة تركت لك مثالين ممكن تجرب فيهم اللى اتعلمته</p>\n<ul>\n<li>\n<p><a href=\"https://codesandbox.io/s/kkm2o57ky3\">useState in Functional Component</a></p>\n<iframe src=\"https://codesandbox.io/embed/kkm2o57ky3?fontsize=14\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n</li>\n<li>\n<p><a href=\"https://codesandbox.io/s/l49v8r45xq\">state in Class Component</a></p>\n<iframe src=\"https://codesandbox.io/embed/l49v8r45xq?fontsize=14\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n</li>\n</ul>\n<p>فى الجزء التانى- هنتكلم عن الـ <code>useEffect</code>.</p>","fields":{"slug":"blog/posts/From-ReactJS-Class-Component-to-Functional-Component-useState-(Part-1)/ar/"},"frontmatter":{"date":"March 09, 2018","title":"من ReactJS Class Component الى Functional Component - useState (الجزء الاول بالعربى)","toArabic":true},"timeToRead":3,"wordCount":{"words":250}}},"pageContext":{"slug":"blog/posts/From-ReactJS-Class-Component-to-Functional-Component-useState-(Part-1)/ar/","toArabic":true}}