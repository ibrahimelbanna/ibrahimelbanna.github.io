{"data":{"markdownRemark":{"html":"<h1>From ReactJS Class Component to Functional Component - useState (Part 1)</h1>\n<p>Hello everyone, In this post (Two parts) I'll convert a reactjs code from a class component to a functional component. Focusing on <code>useState</code> and <code>useEffect</code> hooks.\nlet's begin with the part 1 <code>useState</code> hook.</p>\n<h2>State</h2>\n<h3>In Class Component</h3>\n<p>In the class component, we intialize the <code>state</code> object of <code>this</code> class in the <code>constructor</code> function to say this state belongs to this component, and its value intialized in the <code>constuctor</code>. We can change the state by calling <code>setState()</code> passing the new object.\nCode for this will be something like this</p>\n<pre><code class=\"language-jsx\">import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    };\n  }\n  render() {\n    return (\n      &#x3C;div className=\"App\">\n        &#x3C;h1>Current count: {this.state.count}&#x3C;/h1>\n        &#x3C;button onClick={() => this.setState({ count: this.state.count + 1 })}>\n          Increment\n        &#x3C;/button>\n      &#x3C;/div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(&#x3C;App />, rootElement);\n</code></pre>\n<p>One of the features using <code>setState()</code> is the callback, Yes you can pass a second argument as a callback. Which is a great feature.\nexample on this</p>\n<pre><code class=\"language-jsx\">&#x3C;button\n  onClick={() =>\n    this.setState({ count: this.state.count + 1 }, () => {\n      console.log(this.state.count);\n     })\n  }\n>\n</code></pre>\n<h3>In Functional Component</h3>\n<p>In a functional component, there's no <code>constructor()</code> no <code>this</code> keyword no <code>render()</code> function.\nFirst we have to import <code>useState</code> from <code>react</code>.\n<code>import React, { useState } from \"react\";</code>\n<code>useState</code> takes just one argument which is the intial value, and returns a stateful value and a function to change it, we destructured it like this:\n<code>const [state, setState] = useState(initialValue);</code>\nTo use it, simply we can use it like the class example.</p>\n<pre><code class=\"language-jsx\">const [state, setState] = useState({\n  count: 0\n});\n\nconsole.log(state.count); // 0\n</code></pre>\n<p>and update it like this</p>\n<pre><code class=\"language-jsx\">setState({ count: state.count + 1 });\n</code></pre>\n<h4>But, What if we have more than one value?</h4>\n<p>Here we have two options:</p>\n<ul>\n<li>first, simply use it like above.</li>\n</ul>\n<pre><code class=\"language-jsx\">const [state, setState] = useState({\n  count: 0,\n  barcode: \"1A\"\n});\n</code></pre>\n<p>BUT, when you change it, don't forget to pass the current state, and just change what you want, like this:</p>\n<pre><code class=\"language-jsx\">setState({\n  ...state,\n  barcode: \"2B\"\n});\n</code></pre>\n<p>if you write this <code>setState({barcode: \"2B\"});</code> you simply changed the state, and removed the <code>count</code> key.</p>\n<ul>\n<li>Second, you can use <code>useState</code> multiple times in the same component, one for <code>count</code> and one for <code>barcode</code> like this:</li>\n</ul>\n<pre><code class=\"language-jsx\">const [count, setCount] = useState(0);\nconst [barcode, setBarcode] = useState(\"1A\");\n</code></pre>\n<p>and to update it, just pass the value:</p>\n<pre><code class=\"language-jsx\">setBarcode(value);\nsetCount(count + 1);\n</code></pre>\n<p>Unfortunately <code>useState</code> doesn't accept a second argument, So we have to use <code>useEffect</code> hook to handle the change on the component.\nBefore you go, please check the two codesandboxes to try what you learned in this article.</p>\n<ul>\n<li><a href=\"https://codesandbox.io/s/kkm2o57ky3\">useState in Functional Component</a></li>\n<li><a href=\"https://codesandbox.io/s/l49v8r45xq\">state in Class Component</a></li>\n</ul>\n<p>In Part 2 —We will expand our code to include <code>useEffect</code> hook.</p>","fields":{"slug":"blog/posts/From-ReactJS-Class-Component-to-Functional-Component-useState-(Part-1)/"},"frontmatter":{"date":"March 09, 2018","title":"From ReactJS Class Component to Functional Component - useState (Part 1)","toArabic":true},"timeToRead":3,"wordCount":{"words":310}}},"pageContext":{"slug":"blog/posts/From-ReactJS-Class-Component-to-Functional-Component-useState-(Part-1)/","toArabic":true}}