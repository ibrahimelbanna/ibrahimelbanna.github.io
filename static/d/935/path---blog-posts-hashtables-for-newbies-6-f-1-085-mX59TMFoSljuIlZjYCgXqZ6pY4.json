{"data":{"markdownRemark":{"html":"<h1>HashTables</h1>\n<p>Before we make a hashtable, let's talk about its components <code class=\"language-text\">arrays</code>, <code class=\"language-text\">functions</code>, and <code class=\"language-text\">hashing</code>. read them even if you know!</p>\n<h2>Components</h2>\n<h3>Arrays?</h3>\n<p><code class=\"language-text\">const colors = [&#39;red&#39;,&#39;blue&#39;,&#39;orange&#39;]</code></p>\n<p>if we <code class=\"language-text\">console.log(colors[0])</code> the console displays the head which is <code class=\"language-text\">red</code>, we wrote the elements by this order and know what each index points to which color. This easy and explicit.</p>\n<h3>Functions?</h3>\n<p>Functions are cool boxes, you pass it a value and tell it how to generate a result from it. <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3b/Function_machine2.svg/1200px-Function_machine2.svg.png\"></p>\n<p>Have you ever wrote this in linear algebra class <code class=\"language-text\">f(x) = x+5</code>? in programming you can write it in same way <code class=\"language-text\">const f = x =&gt; x+5</code>, if we pass it a <code class=\"language-text\">3</code> the function returns <code class=\"language-text\">8</code> no fancy here.</p>\n<h3>Hashing?</h3>\n<p>Hashing is kinda blackbox in tech talks, in other words it's a bunch of steps you're doing to convert a something to a unique <code class=\"language-text\">hash</code> or <code class=\"language-text\">value</code>, it's a oneway you can't go back. In programming we write those bunch of steps (hash Algorithm) in a function called hash function.</p>\n<h3>Objects?</h3>\n<p>A key-value represented, like arrays but in array you get the value by index, in objects you get the value by its special key.</p>\n<p><code class=\"language-text\">const white = {code: &#39;#fff&#39;, type: &#39;color&#39;}</code></p>\n<p>If we want the <code class=\"language-text\">code</code> of <code class=\"language-text\">white</code> we simply write <code class=\"language-text\">white[&#39;code&#39;]</code><sup>(1)</sup>, easy and fast huh?</p>\n<h2>What is the hashtable?</h2>\n<p>In a simple sentence, Hashtable is data-structure to help you using an ordinary array as a key-value array!</p>\n<h3>Let's exploring How?</h3>\n<p>We have a <code class=\"language-text\">colors</code> array like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript \"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript  line-numbers\"><code class=\"language-javascript \">const colors = [\n  { color: &quot;white&quot;, code: &quot;#fff&quot; },\n  { color: &quot;orange&quot;, code: &quot;#fc3&quot; }\n];</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>and The problem is we have to find the <code class=\"language-text\">code</code> of the color <code class=\"language-text\">orange</code>?!\nwithout Hashtable the first naive solution is iterating the whole array and if color is orange display the code! slow, right?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript \"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript  line-numbers\"><code class=\"language-javascript \">colors.map(color =&gt; {\n  if (color[&quot;color&quot;] === &quot;orange&quot;) console.log(color[&quot;code&quot;]);\n});</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Let's take another approach, converting it into a key-value array.\nconvert the last array to this array:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript \"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript  line-numbers\"><code class=\"language-javascript \">const colors = [&quot;#fff&quot;, &quot;#fc3&quot;];</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>and if we write <code class=\"language-text\">colors[&#39;orange&#39;]</code> the console displays <code class=\"language-text\">#fc3</code>!\nTo do this we have to <code class=\"language-text\">hash</code> the word <code class=\"language-text\">white</code> and <code class=\"language-text\">orange</code> to be equal index in size which is <code class=\"language-text\">&gt;=</code> zero and less than the array size.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript \"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript  line-numbers\"><code class=\"language-javascript \">const colors = [];\n\nconst hashFunction = key =&gt; {\n  const letters = key.split(&quot;&quot;);\n  const hashValue =\n    letters.reduce((acc, cur) =&gt; acc + cur.charCodeAt(0), 0) %\n    (!colors.length ? 1 : colors.length + 1);\n\n  // in the line above, we made a &#39;%&#39; to range the\n  // value to be between zero (included) and the length of\n  // the list\n\n  return hashValue;\n};\ncolors[hashFunction(&quot;orange&quot;)] = &quot;#fc3&quot;;\ncolors[hashFunction(&quot;white&quot;)] = &quot;#fff&quot;;\n\nconsole.log(colors[hashFunction(&quot;orange&quot;)]); // &#39;#fc3&#39;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Wow! that's Great! but if we have two colors return the same index we call it <code class=\"language-text\">Collision</code>, what should we do?!\nIn the actual implementations for the hashtable, the hash function must avoid the collision with two constraints:</p>\n<ul>\n<li>The index must be unique for each word.</li>\n<li>The index must be <code class=\"language-text\">&gt;=</code> zero and <code class=\"language-text\">&lt;</code> list length.</li>\n</ul>\n<h4>Notes:</h4>\n<p>(1) Write it <code class=\"language-text\">white[&#39;code&#39;]</code> don't <code class=\"language-text\">white[code]</code> whatever you wrote <code class=\"language-text\">code</code> in the object to avoid conflicts between ordinary variables.</p>\n<p>You can read it on <a href=\"https://gist.github.com/zeyadetman/2843e7d8798a58c3c5149487999c0288\">GitHub</a>.</p>","fields":{"slug":"blog/posts/hashtables-for-newbies/"},"frontmatter":{"date":"September 26, 2018","title":"Hashtables for newbies","toArabic":null},"timeToRead":3,"wordCount":{"words":373}}},"pageContext":{"slug":"blog/posts/hashtables-for-newbies/","toArabic":null}}